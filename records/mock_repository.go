// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fufu-yedek/getir-challange/records (interfaces: Repository)

// Package mocks is a generated GoMock package.
package records

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	Ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{Ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindWithCount mocks base method.
func (m *MockRepository) FindWithCount(arg0 Filter) ([]RecordWithCount, error) {
	m.Ctrl.T.Helper()
	ret := m.Ctrl.Call(m, "FindWithCount", arg0)
	ret0, _ := ret[0].([]RecordWithCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithCount indicates an expected call of FindWithCount.
func (mr *MockRepositoryMockRecorder) FindWithCount(arg0 interface{}) *gomock.Call {
	mr.mock.Ctrl.T.Helper()
	return mr.mock.Ctrl.RecordCallWithMethodType(mr.mock, "FindWithCount", reflect.TypeOf((*MockRepository)(nil).FindWithCount), arg0)
}
