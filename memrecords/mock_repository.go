// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fufu-yedek/getir-challange/memrecords (interfaces: Repository)

// Package memrecords is a generated GoMock package.
package memrecords

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	Ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{Ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockRepository) CreateOrUpdate(arg0 Record) (Record, error) {
	m.Ctrl.T.Helper()
	ret := m.Ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRepositoryMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.Ctrl.T.Helper()
	return mr.mock.Ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRepository)(nil).CreateOrUpdate), arg0)
}

// FindOne mocks base method.
func (m *MockRepository) FindOne(arg0 Filter) (Record, error) {
	m.Ctrl.T.Helper()
	ret := m.Ctrl.Call(m, "FindOne", arg0)
	ret0, _ := ret[0].(Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRepositoryMockRecorder) FindOne(arg0 interface{}) *gomock.Call {
	mr.mock.Ctrl.T.Helper()
	return mr.mock.Ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRepository)(nil).FindOne), arg0)
}
